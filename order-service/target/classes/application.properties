# Give your application a name and set a unique port
# (so it doesn't clash with your other microservices)
server.port=8082
spring.application.name=order-service

# --- PostgreSQL Database Configuration ---
# The URL to your PostgreSQL database. You might need to create a database named "order_db".
spring.datasource.url=jdbc:postgresql://localhost:5432/order_db
spring.datasource.username=your_postgres_username
spring.datasource.password=your_postgres_password

# --- JPA / Hibernate Configuration ---
# This is a very useful property for development.
# "update" means Hibernate will automatically create or update your database tables
# based on your @Entity classes when the application starts.
spring.jpa.hibernate.ddl-auto=update

# This makes the SQL printed to the console readable (optional but recommended)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- RabbitMQ Configuration ---
# Tells your application where to find the RabbitMQ message broker
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.exchange.name=order_exchange

# --- URLs for Other Microservices ---
# It's good practice to define the URLs for other services here
# instead of hardcoding them in your Java code.
service.url.shopping-cart=http://localhost:8081/api/carts
service.url.payment=http://localhost:8083/api/payments